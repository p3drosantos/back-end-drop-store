generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id       String    @id
  name     String
  slug     String
  imageUrl String
  Product  Product[]
}

model Order {
  id            String          @id
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  status        OrderStatus     @default(WAITING_FOR_PAYMENT)
  User          User            @relation(fields: [userId], references: [id])
  OrderProducts OrderProducts[]
}

model OrderProducts {
  id                 String  @id
  productId          String
  orderId            String
  basePrice          Decimal @db.Decimal(8, 2)
  discountPercentage Int     @default(0)
  quantity           Int
  Order              Order   @relation(fields: [orderId], references: [id])
  Product            Product @relation(fields: [productId], references: [id])
}

model Product {
  id                 String          @id
  name               String
  slug               String
  description        String
  basePrice          Decimal         @db.Decimal(8, 2)
  categoryId         String
  discountPercentage Int             @default(0)
  imageUrls          String[]
  OrderProducts      OrderProducts[]
  Category           Category        @relation(fields: [categoryId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Order         Order[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}
